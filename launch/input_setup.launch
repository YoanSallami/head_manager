<launch>
	<rosparam>
    mocap_calib_world_x: 0.0
    mocap_calib_world_y: 0.0
    mocap_calib_world_z: 0.0
    </rosparam>
	<!-- Launch the pdg -->
	<node name="pdg" pkg="pdg" type="pdg"/>

	<!-- Launch the agent monitor -->
	<node name="agent_monitor" pkg="agent_monitor" type="agent_monitor" output="screen" /> 
    
    <!-- Launch the area monitor -->
    <node name="area_manager" pkg="area_manager" type="area_manager" output="log" />  

    <!-- Launch the visualization of toaster -->
	<node name="toaster_visualizer" pkg="toaster_visualizer" type="toaster_visualizer" output="screen" />  

	<!-- Launch the toaster database -->
    <!--node name="run_server" pkg="database_manager" type="run_server" output="screen"/-->  
    <include file="$(find database_manager)/launch/Database.launch"/>

    <node pkg="rosservice" type="rosservice" name="manage_stream" args="call --wait /pdg/manage_stream '{morseHuman: false, niutHuman: false, groupHuman: false, mocapHuman: false, adreamMocapHuman: true,
  toasterSimuHuman: false, pr2Robot: false, spencerRobot: false, toasterSimuRobot: false,
  toasterSimuObject: false, arObject: true}' "/>

    <include file="$(find ar_track_alvar)/launch/pr2_bundle_no_kinect.launch"/>

    <node pkg="rostopic" type="rostopic" name="enable_ar_track_alvar" args="pub /ar_track_alvar/enable_detection std_msgs/Bool 'data: true'"/> 

    <node name="activity_states_faker" pkg="head_manager" type="activity_states_faker" output="screen" />

    <include file="$(find pr2_teleop)/launch/teleop_joystick.launch"/>

    <node pkg="rosservice" type="rosservice" name="add_area" args="call -- wait /area_manager/add_area 'myArea:
          id: 0
          name: 'interaction'
          myOwner: 'pr2'
          areaType: ''
          factType: 'interaction'
          entityType: 'entities'
          isCircle: false
          center: {x: 0.0, y: 0.0, z: 0.0}
          ray: 2.0
          poly:
            points:
            - {x: 0, y: -1, z: 0}
            - {x: 2, y: -2, z: 0}
            - {x: 2, y: 2, z: 0}
            - {x: 0, y: 1, z: 0}
            - {x: 0, y: -1, z: 0}
          insideEntities: [0]'"/>
  
    <node pkg="rosservice" type="rosservice" name="add_area" args="call -- wait /area_manager/add_area 'myArea:
          id: 1
          name: 'action'
          myOwner: 'TABLE_4'
          areaType: ''
          factType: 'direction'
          entityType: 'entities'
          isCircle: false
          center: {x: 0.0, y: 0.0, z: 0.0}
          ray: 1.0
          poly:
            points:
            - {x: 0.5, y: -1, z: 0}
            - {x: 0.5, y: 1, z: 0}
            - {x: -0.5, y: 1, z: 0}
            - {x: -0.5, y: -1, z: 0}
          insideEntities: [0]'"/>

    <node pkg="rosservice" type="rosservice" name="db_execute" args="call --wait /database_manager/execute '{command: 'EMPTY', type: 'ALL', facts: [], agent: '', order: '', areaTopic: false ,agentTopic: false ,move3dTopic: false ,pdgTopic: false}'"/>

    <node pkg="rosservice" type="rosservice" name="monitor_all" args="call --wait /agent_monitor/monitor_all_agents 'monitorAll: true'"/>
    <node pkg="rosservice" type="rosservice" name="monitor_joint1" args="call --wait /agent_monitor/add_joint_to_agent '{jointName: 'head', agentId: 'HERAKLES_HUMAN1'}'"/>
    <node pkg="rosservice" type="rosservice" name="monitor_joint2" args="call --wait /agent_monitor/add_joint_to_agent '{jointName: 'rightHand', agentId: 'HERAKLES_HUMAN1'}'"/>
    <node pkg="rosservice" type="rosservice" name="monitor_joint3" args="call --wait /agent_monitor/add_joint_to_agent '{jointName: 'laser_tilt_mount_link', agentId: 'pr2'}'"/>

	
</launch>
